@using Microsoft.AspNetCore.Identity
@using Teashop2.Extensions

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject IServiceProvider ServiceProvider

@model PaginatedList<Teashop2.Models.Product>

@{
    ViewData["Title"] = "Produkty";
}

<h1>Produkty</h1>
<hr />
@if (User.IsInRole("Admin"))
{
    <p>
        <a asp-action="Create" class="btn btn-success">Dodaj nowy produkt</a>
    </p>
}
<form asp-action="Index" method="get" >
    <div class="form-actions no-color d-inline-bloc">
        <p>
            <input class="form-control mr-sm-2 w-25" type="text" name="SearchString" placeholder="Wyszukaj produkt" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Wyszukaj" class="btn btn-outline-success my-2 my-sm-0" />
            <a asp-action="Index" class="btn btn-outline-secondary">Wyczyść filtr</a>
        </p>
    </div>
</form>
<table class="table">
    <thead class="bg-light">
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none">Nazwa</a>
            </th>
            <th>
                Opis
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["PriceSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none">Cena [zł]</a>
            </th>
            @if (User.IsInPolicy("writepolicy", ServiceProvider))
            {
                <th>
                    Ilość na stanie
                </th>
            }
            <th>
                Dostępny
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            @if (User.IsInPolicy("writepolicy", ServiceProvider))
            {
                <td>
                    @Html.DisplayFor(modelItem => item.QuantityOnStock)
                </td>
            }
            <td>
                @if (item.IsAvaliable)
                {
                        <span>Tak</span>
                }
                else
                {
                    <span>Nie</span>
                }
            </td>
            <td>
                @if (User.IsInPolicy("writepolicy", ServiceProvider))
                {
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-dark">Edycja&nbsp;<i class="bi bi-pencil"></i></a>
                }
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-primary">Szczegóły&nbsp;<i class="bi bi-eye-fill"></i></a>
            </td>
        </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}
<div class="align-content-center mx-auto">
    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-secondary @prevDisabled">
        <i class="bi bi-arrow-left"></i>
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-secondary @nextDisabled">
        <i class="bi bi-arrow-right"></i>
    </a>
</div>
